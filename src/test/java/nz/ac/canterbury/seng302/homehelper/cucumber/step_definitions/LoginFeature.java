package nz.ac.canterbury.seng302.homehelper.cucumber.step_definitions;

import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import jakarta.transaction.Transactional;
import nz.ac.canterbury.seng302.homehelper.exceptions.auth.UserDetailsInvalidException;
import nz.ac.canterbury.seng302.homehelper.repository.user.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.ui.ModelMap;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import static java.util.Objects.requireNonNull;
import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

@Transactional
@SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")
public class LoginFeature {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private UserRepository userRepository;

    private MvcResult result;
    private Map<String, String> formData;

    @Before
    public void setup() {
        formData = new HashMap<>();
    }

    @Given("I want to login and I am on the system's main URL")
    public void i_want_to_login_and_i_am_on_the_system_s_main_url() throws Exception {
        result = mockMvc.perform(get("/"))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/homePage"))
                .andReturn();
    }

    @Given("a user does not exist with email {string}")
    public void a_user_does_not_exist_with_email(String email) {
        assertTrue(userRepository.findByEmail(email).isEmpty());
    }

    @Given("I am on the login form")
    public void i_am_on_the_login_form() throws Exception {
        mockMvc.perform(get("/login"))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/auth/loginPage"));
    }

    @When("I enter {string} as the {string} on the login form")
    public void i_enter_as_the_on_the_login_form(String value, String fieldName) {
        formData.put(fieldName, value);
    }

    @When("I click the Sign In button on the login form")
    public void i_click_the_sign_in_button_on_the_login_form() throws Exception {
        result = mockMvc.perform(post("/do_login")
                        .param("email", formData.getOrDefault("email", ""))
                        .param("password", formData.getOrDefault("password", ""))
                        .with(csrf()))
                .andReturn();
    }

    @Then("I see a button labelled Sign In to view the login form")
    public void i_see_a_button_labelled_sign_in_to_view_the_login_form() throws UnsupportedEncodingException {
        String content = result.getResponse().getContentAsString();
        // pattern generated by ChatGPT to find an anchor with specific text not caring about spaces or attributes other than href
        // Regex to find: <a ... href="/login" ...>Sign In</a>
        Pattern pattern = Pattern.compile(
                "<a[^>]*href=[\"']/login[\"'][^>]*>\\s*Sign In\\s*</a>",
                Pattern.CASE_INSENSITIVE
        );
        assertTrue(pattern.matcher(content).find());
    }

    @Then("I should see an error message for the field {string} {string} on the login form")
    public void i_should_see_an_error_message_for_the_field_on_the_login_form(String fieldName, String errorMessage) {
        ModelMap model = requireNonNull(result.getModelAndView()).getModelMap();
        UserDetailsInvalidException exception = (UserDetailsInvalidException) requireNonNull(model.getAttribute("errors"));
        assertEquals(errorMessage, extractErrorMessage(exception, fieldName));
    }

    @Then("I should see a credentials error message {string} on the login form")
    public void i_should_see_a_credentials_error_message_on_the_login_form(String errorMessage) {
        ModelMap model = requireNonNull(result.getModelAndView()).getModelMap();
        UserDetailsInvalidException exception = (UserDetailsInvalidException) requireNonNull(model.getAttribute("errors"));
        assertEquals(errorMessage, exception.getCredentialsError());
    }

    @Then("I am not logged in")
    public void i_am_not_logged_in() {
        MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);
        assertNull(session, "User should not have a session");
    }

    @Then("I am logged in")
    public void i_am_logged_in() {
        assertEquals(302, result.getResponse().getStatus()); // redirection to home page after login

        MockHttpSession session = (MockHttpSession) result.getRequest().getSession(false);
        assertNotNull(session, "User should have a session");
    }

    private String extractErrorMessage(UserDetailsInvalidException exception, String field) {
        return switch (field) {
            case "email" -> exception.getEmailError();
            case "password" -> exception.getPasswordError();
            default -> throw new IllegalArgumentException("Error param - Unknown field: " + field);
        };
    }
}
