package nz.ac.canterbury.seng302.homehelper.integration.service;

import jakarta.mail.MessagingException;
import jakarta.mail.Session;
import jakarta.mail.internet.MimeMessage;
import nz.ac.canterbury.seng302.homehelper.entity.user.ForgottenPasswordToken;
import nz.ac.canterbury.seng302.homehelper.entity.user.User;
import nz.ac.canterbury.seng302.homehelper.entity.user.VerificationToken;
import nz.ac.canterbury.seng302.homehelper.service.EmailService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.transaction.annotation.Transactional;

import java.io.ByteArrayOutputStream;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

@SpringBootTest
@Transactional
@ExtendWith(MockitoExtension.class)
public class EmailServiceIntegrationTests {

    @MockBean
    private JavaMailSender mailSender; // prevent actual email sending

    @Autowired
    private EmailService emailService;

    @Captor
    private ArgumentCaptor<MimeMessage> messageCaptor;

    private User testUser;
    private ForgottenPasswordToken testForgottenPasswordToken;
    private VerificationToken testVerificationToken;

    @BeforeEach
    void setup() {
        testUser = new User("John", "Smith", "john.smith@gmail.com", "password", "password");
        testForgottenPasswordToken = new ForgottenPasswordToken(testUser, LocalDateTime.now().plusMinutes(10));
        testVerificationToken = new VerificationToken("123456", testUser, LocalDateTime.now().plusMinutes(10));
        testForgottenPasswordToken.setId(UUID.randomUUID());

        when(mailSender.createMimeMessage()).thenReturn(new MimeMessage((Session) null));

        // inject the "from" email address into the EmailService using reflection
        ReflectionTestUtils.setField(emailService, "fromEmail", "test@example.com");
    }

    @Test
    void testSendResetPasswordMail_whenSent_hasCorrectSubjectAndContainsForgottenPasswordToken() throws Exception {
        emailService.sendResetPasswordMail(testUser, testForgottenPasswordToken).join();
        verify(mailSender, times(1)).send(messageCaptor.capture());

        MimeMessage message = messageCaptor.getValue();
        String content = extractEmailContentManually(message);
        assertEquals("HomeHelper Forgotten Password", message.getSubject());
        assertTrue(content.contains(testForgottenPasswordToken.getId().toString()));
    }

    @Test
    void testSendRegistrationVerificationMail_whenSent_hasCorrectSubjectAndContainsVerificationToken() throws Exception {
        emailService.sendRegistrationVerificationMail(testUser, testVerificationToken).join();
        verify(mailSender, times(1)).send(messageCaptor.capture());

        MimeMessage message = messageCaptor.getValue();
        assertEquals("HomeHelper Verification Code", message.getSubject());
        String content = extractEmailContentManually(message);
        assertTrue(content.contains(testVerificationToken.getToken()));
    }

    @Test
    void testSendPasswordUpdateMail_generatesCorrectContent() throws MessagingException {
        emailService.sendPasswordUpdatedMail(testUser).join();
        verify(mailSender, times(1)).send(messageCaptor.capture());

        MimeMessage message = messageCaptor.getValue();
        assertEquals("HomeHelper Password Updated", message.getSubject());
    }

    /* Generated by Claude AI - used to extract HTML from the MimeMessage */
    private String extractEmailContentManually(MimeMessage message) throws Exception {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        message.writeTo(outputStream);

        String rawMessage = outputStream.toString(StandardCharsets.UTF_8);
        Pattern htmlPattern = Pattern.compile("(Content-Type: text/html;[\\s\\S]*?)\r\n\r\n([\\s\\S]*?)\r\n--");
        Matcher matcher = htmlPattern.matcher(rawMessage);
        if (matcher.find()) {
            return matcher.group(2).trim();
        }
        return rawMessage;
    }
}
