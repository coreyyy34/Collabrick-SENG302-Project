package nz.ac.canterbury.seng302.homehelper.integration.controller.renovation;

import jakarta.transaction.Transactional;
import nz.ac.canterbury.seng302.homehelper.entity.renovation.*;
import nz.ac.canterbury.seng302.homehelper.entity.user.User;
import nz.ac.canterbury.seng302.homehelper.model.renovation.ExpenseCategory;
import nz.ac.canterbury.seng302.homehelper.model.renovation.RenovationMemberRole;
import nz.ac.canterbury.seng302.homehelper.repository.renovation.ExpenseRepository;
import nz.ac.canterbury.seng302.homehelper.repository.renovation.RecentlyAccessedRenovationRepository;
import nz.ac.canterbury.seng302.homehelper.repository.renovation.RenovationRepository;
import nz.ac.canterbury.seng302.homehelper.repository.renovation.TaskRepository;
import nz.ac.canterbury.seng302.homehelper.repository.user.UserRepository;
import nz.ac.canterbury.seng302.homehelper.service.renovation.TaskService;
import nz.ac.canterbury.seng302.homehelper.validation.renovation.RenovationValidation;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.mockito.ArgumentMatchers.any;

@Transactional
@SpringBootTest
@AutoConfigureMockMvc
public class RenovationControllerIntegrationTests {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private RenovationRepository renovationRepository;

    @Autowired
    private UserRepository userRepository;

    @SpyBean
    private RecentlyAccessedRenovationRepository recentlyAccessedRenovationRepository;

    private Renovation privateRenovation;

    private Renovation publicRenovation;

    private User ownerUser;

    private User memberUser;

    private User nonMemberUser;

    private Renovation renovation;

    // Test cases generated by ChatGPT
    private static final String[] INVALID_RENOVATION_NAMES = {
            "---",
            "... ...",
            "'",
            "   -.-   ",
            "Kitchen@Home",
            "House#1",
            "Bathroom$Upgrade",
            "New/Old",
            "Living Room!",
            "Main_Bedroom",
            "Win%Dow",
            "Fix it ASAP (urgent)"};
    @Autowired
    private TaskRepository taskRepository;
    @Autowired
    private TaskService taskService;
    @Autowired
    private ExpenseRepository expenseRepository;

    // Method provided by ChatGPT
    static Stream<String> provideInvalidRenovationNames() {
        return Arrays.stream(INVALID_RENOVATION_NAMES);
    }

    static Stream<Arguments> provideValidRenovationDetails() {
        return Stream.of(
                Arguments.of(
                        "New Renovation",
                        "Test Description",
                        "Living Room",
                        "Kitchen"
                ),
                Arguments.of(
                        "my renovation.2-0",
                        "JSkIEpXk0b2jLgDpRuKAjGwCbFnDM0Tjifs^x" +
                                "VHI\\\"<Q=sFMlXim9E/]]HFf^S8j8,%8[>\\\"e7uDxU9s6R%4e&nRImDx&.Z)JNfqAC_y5_Qh.LuG9" +
                                "('Gixd]yy_ZcJ}u/N'uZ`oQrtyr:|Q7`t`6v;AYrG7w_>Gdr)Za}%<CV6`]@{&J\\\\LqcOk1AY~SR(qt0)" +
                                "x6[Rou|--PFR72m:vg49#\\\"l]aH^fI[E`.vI;+^|mD!Vi?_6R52;i]]mwhE;yhY^!:3*#<,~HLRB=xb;" +
                                "Kbg?b&7h^'w11L.XCEuR#@gGfvyTTaV9V;/Z(>4^9YM>?+SeC'ihOS%1}:i'9zf`V4+c$CO(0g[Dm;r/u",
                        " -Living .Room1",
                        ",Kitchen'"
                )
        );
    }


    @BeforeEach
    void setUpDatabase() {
        renovationRepository.deleteAll();
        recentlyAccessedRenovationRepository.deleteAll();
        userRepository.deleteAll();
        User user = new User("Test", "user", "user@test.com", "Password123!", "Password123!");
        userRepository.save(user);
        renovation = new Renovation("TestRenovationName", "TestRenovationDescription");
        renovation.setOwner(user);
        renovationRepository.save(renovation);
        User secondUser = new User("Another", "user", "anotherUser@test.com", "Password123!", "Password123!");
        userRepository.save(secondUser);

        ownerUser = new User("Steve","Minecraft","steve.minecraft@gmail.com", "Abc123!!", "Abc123!!");
        ownerUser.setActivated(true);
        userRepository.save(ownerUser);

        memberUser = new User("Alex", "Minecraft", "alex.minecraft@gmail.com", "Abc123!!", "Abc123!!");
        memberUser.setActivated(true);
        userRepository.save(memberUser);

        nonMemberUser = new User("Villager", "Minecraft", "villager@gmail.com", "Abc123!!", "Abc123!!");
        nonMemberUser.setActivated(true);
        userRepository.save(nonMemberUser);

        privateRenovation = new Renovation("Minecraft Dirt Hut", "3x4x3 dirt shack, first night");
        privateRenovation.setOwner(ownerUser);
        privateRenovation.addMember(memberUser, RenovationMemberRole.MEMBER);
        renovationRepository.save(privateRenovation);

        publicRenovation = new Renovation("Woodland Mansion", "x=3400, y=70, z=-10023");
        publicRenovation.setOwner(ownerUser);
        publicRenovation.setPublic(true);
        publicRenovation.addMember(memberUser, RenovationMemberRole.MEMBER);
        renovationRepository.save(publicRenovation);
    }

    @Test
    void getAllUserRenovations_UserAccessOnlyTheirRenovations_HasNoRenovations() throws Exception {
        List<User> users = userRepository.findByEmail("anotherUser@test.com");
        User mockUser = users.getFirst();
        mockMvc.perform(get("/myRenovations")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/myRenovationsPage"))
                .andExpect(model().attribute("pagination", hasProperty("items", hasSize(0))));
    }

    @WithMockUser(username = "1")
    @Test
    void testGetTaskForm_DefaultValues() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        mockMvc.perform(get("/myRenovations/{id}/newTask", renovation.getId())
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditTaskPage"))
                .andExpect(model().attribute("renovation", renovation));
    }

    @WithMockUser(username = "1")
    @Test
    void showNewRenovationForm_whenUserAuthenticated_whenAccessingNewRenovationForm() throws Exception {
        mockMvc.perform(get("/myRenovations/newRenovation"))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("isNewRenovation", true));
    }

    @Test
    void redirectToLogin_whenUnauthenticated_whenAccessingNewRenovationForm() throws Exception {
        mockMvc.perform(get("/myRenovations/newRenovation"))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrlPattern("**/login"));
    }

    // ChatGPT assisted heavily in figuring out why this test kept throwing a Renovation Name isn't unique error when it should have been, it came down to @Transactional wrapping the whole class
    @ParameterizedTest
    @MethodSource("provideValidRenovationDetails")
    void postNewRenovationForm_allValidInputs(String renovationName, String description, String roomName1, String roomName2) throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        assertTrue(renovationRepository.findByNameAndUser(renovationName, mockUser).isEmpty());

        MvcResult mvcResult = mockMvc.perform(post("/myRenovations/newRenovation")
                        .param("name", renovationName)
                        .param("description", description)
                        .param("roomName[]", roomName1, roomName2)
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andReturn();

        Renovation createdRenovation = renovationRepository.findByNameAndUser(renovationName, mockUser).getFirst();
        assertEquals("/renovation/" + createdRenovation.getId(), mvcResult.getResponse().getRedirectedUrl());
    }

    @ParameterizedTest
    @MethodSource("provideInvalidRenovationNames")
    void postNewRenovationForm_InvalidInput_RenovationRoomNameInvalid(String renovationName) throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();


        mockMvc.perform(post("/myRenovations/newRenovation")
                        .param("name", renovationName)
                        .param("description", "Test Description")
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", RenovationValidation.RENOVATION_NAME_INVALID_MESSAGE));
    }


    @Test
    void postNewRenovationForm_InvalidInput_RenovationDescriptionTooLong() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        String renovationName = "New Renovation";

        mockMvc.perform(post("/myRenovations/newRenovation")
                        .param("name", renovationName)
                        .param("description", "JSkIEpXk0b2jLgDpRuKAjGwCbFnDM0Tjifs^x" +
                                "VHI\"<Q=sFMlXim9E/]]HFf^S8j8,%8[>\"e7uDxU9s6R%4e&nRImDx&.Z)JNfqAC_y5_Qh.LuG9" +
                                "('Gixd]yy_ZcJ}u/N'uZ`oQrtyr:|Q7`t`6v;AYrG7w_>Gdr)Za}%<CV6`]@{&J\\LqcOk1AY~SR(qt0)" +
                                "x6[Rou|--PFR72m:vg49#\"l]aH^fI[E`.vI;+^|mD!Vi?_6R52;i]]mwhE;yhY^!:3*#<,~HLRB=xb;" +
                                "Kbg?b&7h^'w11L.XCEuR#@gGfvyTTaV9V;/Z(>4^9YM>?+SeC'ihOS%1}:i'9zf`V4+c$CO(0g[Dm;r/u" +
                                "y.:~mBe:B2c77f!BWW~iKi\\o^_$OB><YGo]UEQqcR9\"A1,qK$=zu3\\o,z|A)z-6`I`1{~:dpG{i=" +
                                "0:NRnt83vYs*Wl=N_RE!vp;p/GM~?^@q@u>IAF'8gq\\aW6dXB_^bZ9\\VAimjjGONKmmh(Ri/&{c`9" +
                                "V!ppVY-ja")
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationDescriptionError", "Renovation record description must be 512 characters or less"));
    }

    @Test
    void postNewRenovationForm_InvalidInput_RenovationNameEmpty() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        String renovationName = "";

        mockMvc.perform(post("/myRenovations/newRenovation")
                        .param("name", renovationName)
                        .param("description", "Description")
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", "Renovation record name cannot be empty"));
    }

    @Test
    void postNewRenovationForm_InvalidInput_RenovationNameNotUnique() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        String renovationName = "TestRenovationName";

        mockMvc.perform(post("/myRenovations/newRenovation")
                        .param("name", renovationName)
                        .param("description", "Description")
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", "Renovation record name is not unique"));
    }

    @Test
    void postNewRenovationForm_InvalidInput_RenovationNameTooLong() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        String renovationName = "JSkIEpXk0b2jJSkIEpXk0b2jJSkIEpXk0b2jJSkIEpXk0b2jJSkIEpXk0JSkIEpXw";
        assertTrue(renovationRepository.findByNameAndUser(renovationName, mockUser).isEmpty());

        mockMvc.perform(post("/myRenovations/newRenovation")
                        .param("name", renovationName)
                        .param("description", "Description")
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", "Renovation record name must be 64 characters or less"));
    }

    @Test
    void showEditRenovationForm_whenUserAuthenticated_andRenovationBelongsToThem() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        mockMvc.perform(get("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("isNewRenovation", false))
                .andExpect(model().attribute("renovation", testRenovation));
    }

    @Test
    void showNotFound_whenUserAuthenticated_andRenovationDoesntBelongsToThem() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        List<User> otherUsers = userRepository.findByEmail("anotherUser@test.com");
        User anotherMockUser = otherUsers.getFirst();

        mockMvc.perform(get("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .with(csrf())
                        .with(user(String.valueOf(anotherMockUser.getId())).password(anotherMockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/notFound"));
    }

    @Test
    void showLogin_whenUserUnauthenticated_whenAccessingEditRenovationForm() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        mockMvc.perform(get("/myRenovations/{id}/editRenovation", testRenovation.getId()))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrlPattern("**/login"));
    }

    @ParameterizedTest
    @MethodSource("provideValidRenovationDetails")
    void postEditRenovationForm_allValidInputs(String renovationName, String description, String roomName1, String roomName2) throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        assertTrue(renovationRepository.findByNameAndUser(renovationName, mockUser).isEmpty());

        mockMvc.perform(post("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .param("name", renovationName)
                        .param("description", description)
                        .param("roomName[]", roomName1, roomName2)
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/myRenovations/" + testRenovation.getId()));

        assertFalse(renovationRepository.findByName(renovationName).isEmpty());
    }


    @Test
    void postEditRenovationForm_InvalidInput_RenovationDescriptionTooLong() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        mockMvc.perform(post("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .param("name", testRenovation.getName())
                        .param("description", "JSkIEpXk0b2jLgDpRuKAjGwCbFnDM0Tjifs^x" +
                                "VHI\\\"<Q=sFMlXim9E/]]HFf^S8j8,%8[>\\\"e7uDxU9s6R%4e&nRImDx&.Z)JNfqAC_y5_Qh.LuG9" +
                                "('Gixd]yy_ZcJ}u/N'uZ`oQrtyr:|Q7`t`6v;AYrG7w_>Gdr)Za}%<CV6`]@{&J\\\\LqcOk1AY~SR(qt0)" +
                                "x6[Rou|--PFR72m:vg49#\\\"l]aH^fI[E`.vI;+^|mD!Vi?_6R52;i]]mwhE;yhY^!:3*#<,~HLRB=xb;" +
                                "Kbg?b&7h^'w11L.XCEuR#@gGfvyTTaV9V;/Z(>4^9YM>?+SeC'ihOS%1}:i'9zf`V4+c$CO(0g[Dm;r/u" +
                                "y.:~mBe:B2c77f!BWW~iKi\\\\o^_$OB><YGo]UEQqcR9\\\"A1,qK$=zu3\\\\o,z|A)z-6`I`1{~:dpG{i=" +
                                "0:NRnt83vYs*Wl=N_RE!vp;p/GM~?^@q@u>IAF'8gq\\\\aW6dXB_^bZ9\\\\VAimjjGONKmmh(Ri/&{c`9" +
                                "V!ppVY-ja")
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationDescriptionError", "Renovation record description must be 512 characters or less"));
    }

    @ParameterizedTest
    @MethodSource("provideInvalidRenovationNames")
    void postEditRenovationForm_InvalidInput_RenovationNameInvalid(String renovationName) throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        mockMvc.perform(post("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .param("name", renovationName)
                        .param("description", testRenovation.getDescription())
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", RenovationValidation.RENOVATION_NAME_INVALID_MESSAGE));
    }

    @Test
    void postEditRenovationForm_InvalidInput_RenovationNameEmpty() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        mockMvc.perform(post("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .param("name", "")
                        .param("description", testRenovation.getDescription())
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", "Renovation record name cannot be empty"));
    }

    @Test
    void postEditRenovationForm_InvalidInput_RenovationNameNotUnique() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Renovation anotherTestRenovation = new Renovation("Same Name", "Description");
        anotherTestRenovation.setOwner(mockUser);
        renovationRepository.save(anotherTestRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        mockMvc.perform(post("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .param("name", anotherTestRenovation.getName())
                        .param("description", testRenovation.getDescription())
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", "Renovation record name is not unique"));
    }

    @Test
    void postEditRenovationForm_InvalidInput_RenovationNameTooLong() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());

        mockMvc.perform(post("/myRenovations/{id}/editRenovation", testRenovation.getId())
                        .param("name", "JSkIEpXk0b2jJSkIEpXk0b2jJSkIEpXk0b2jJSkIEpXk0b2jJSkIEpXk0JSkIEpXw")
                        .param("description", testRenovation.getDescription())
                        .param("roomName[]", "Living Room", "Kitchen")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditRenovationPage"))
                .andExpect(model().attribute("renovationNameError", "Renovation record name must be 64 characters or less"));
    }

    @Test
    void postVisibilityForm_SetToFalse() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());
        mockMvc.perform(post("/renovation/{id}/setVisibility", testRenovation.getId())
                        .param("isPublic", "false")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/renovation/" + testRenovation.getId()));

        Optional<Renovation> editedRenovation = renovationRepository.findById(testRenovation.getId());
        assertTrue(editedRenovation.isPresent());
        assertFalse(editedRenovation.get().getIsPublic());
    }

    @Test
    void postVisibilityForm_SetToTrue() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        Pageable pageable = PageRequest.of(0, 10);
        assertFalse(renovationRepository.findByUserId(mockUser, pageable).isEmpty());
        mockMvc.perform(post("/renovation/{id}/setVisibility", testRenovation.getId())
                        .param("isPublic", "true")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/renovation/" + testRenovation.getId()));

        Optional<Renovation> editedRenovation = renovationRepository.findById(testRenovation.getId());
        assertTrue(editedRenovation.isPresent());
        assertTrue(editedRenovation.get().getIsPublic());
    }

    @Test
    void getNewTaskForm_withDatePreFilled() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        mockMvc.perform(get("/myRenovations/{id}/newTask?taskDueDate=2025-05-06", renovation.getId())
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/createEditTaskPage"))
                .andExpect(model().attribute("taskDueDate", "2025-05-06"))
                .andExpect(model().attribute("renovation", renovation));
    }

    @Test
    void postBudgetForm_withValidValues_redirectToRenovation() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "100")
                        .param("materialBudget", "100")
                        .param("labourBudget", "100")
                        .param("equipmentBudget", "100")
                        .param("professionalServiceBudget", "100")
                        .param("permitBudget", "100")
                        .param("cleanupBudget", "100")
                        .param("deliveryBudget", "100")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/renovation/" + testRenovation.getId() + "/budget"));

        Budget budget = testRenovation.getBudget();
        assertEquals(BigDecimal.valueOf(100), budget.getMiscellaneousBudget());
        assertEquals(BigDecimal.valueOf(100), budget.getMaterialBudget());
        assertEquals(BigDecimal.valueOf(100), budget.getLabourBudget());
        assertEquals(BigDecimal.valueOf(100), budget.getEquipmentBudget());
        assertEquals(BigDecimal.valueOf(100), budget.getProfessionalServiceBudget());
        assertEquals(BigDecimal.valueOf(100), budget.getPermitBudget());
        assertEquals(BigDecimal.valueOf(100), budget.getCleanupBudget());
        assertEquals(BigDecimal.valueOf(100), budget.getDeliveryBudget());
    }

    @Test
    void postBudgetForm_withNoValuesGiven_redirectToRenovation() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/renovation/" + testRenovation.getId() + "/budget"));

        Budget budget = testRenovation.getBudget();
        assertEquals(BigDecimal.valueOf(0), budget.getMiscellaneousBudget());
        assertEquals(BigDecimal.valueOf(0), budget.getMaterialBudget());
        assertEquals(BigDecimal.valueOf(0), budget.getLabourBudget());
        assertEquals(BigDecimal.valueOf(0), budget.getEquipmentBudget());
        assertEquals(BigDecimal.valueOf(0), budget.getProfessionalServiceBudget());
        assertEquals(BigDecimal.valueOf(0), budget.getPermitBudget());
        assertEquals(BigDecimal.valueOf(0), budget.getCleanupBudget());
        assertEquals(BigDecimal.valueOf(0), budget.getDeliveryBudget());
    }

    @Test
    void postBudgetForm_withValidDecimals_redirectToRenovation() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "1.11")
                        .param("materialBudget", "1.11")
                        .param("labourBudget", "1.11")
                        .param("equipmentBudget", "1.11")
                        .param("professionalServiceBudget", "1.11")
                        .param("permitBudget", "1.11")
                        .param("cleanupBudget", "1.11")
                        .param("deliveryBudget", "1.11")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/renovation/" + testRenovation.getId() + "/budget"));

        Budget budget = testRenovation.getBudget();
        assertEquals(BigDecimal.valueOf(1.11), budget.getMiscellaneousBudget());
        assertEquals(BigDecimal.valueOf(1.11), budget.getMaterialBudget());
        assertEquals(BigDecimal.valueOf(1.11), budget.getLabourBudget());
        assertEquals(BigDecimal.valueOf(1.11), budget.getEquipmentBudget());
        assertEquals(BigDecimal.valueOf(1.11), budget.getProfessionalServiceBudget());
        assertEquals(BigDecimal.valueOf(1.11), budget.getPermitBudget());
        assertEquals(BigDecimal.valueOf(1.11), budget.getCleanupBudget());
        assertEquals(BigDecimal.valueOf(1.11), budget.getDeliveryBudget());
    }

    @Test
    void postBudgetForm_invalidInput_miscellaneousNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "-1")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("miscellaneousError", "Miscellaneous budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_materialNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "-1")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("materialError", "Material budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_labourNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "-1")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("labourError", "Labour budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_equipmentNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "-1")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("equipmentError", "Equipment budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_professionalServicesNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "-1")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("professionalServiceError", "Professional Service budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_permitNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "-1")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("permitError", "Permit budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_cleanupNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "-1")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("cleanupError", "Cleanup budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_deliveryNegative() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "-1")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("deliveryError", "Delivery budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_miscellaneousLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "a")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("miscellaneousError", "Miscellaneous budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_materialLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "a")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("materialError", "Material budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_labourLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "a")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("labourError", "Labour budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_equipmentLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "a")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("equipmentError", "Equipment budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_professionalServicesLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "a")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("professionalServiceError", "Professional Service budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_permitLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "a")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("permitError", "Permit budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_cleanupLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "a")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("cleanupError", "Cleanup budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_deliveryLetters() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "a")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("deliveryError", "Delivery budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_miscellaneousMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "2.111")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("miscellaneousError", "Miscellaneous budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_materialMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "2.111")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("materialError", "Material budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_labourMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "2.111")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("labourError", "Labour budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_equipmentMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "2.111")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("equipmentError", "Equipment budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_professionalServicesMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "2.111")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("professionalServiceError", "Professional Service budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_permitMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "2.111")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("permitError", "Permit budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_cleanupMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "2.111")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("cleanupError", "Cleanup budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_deliveryMoreThanTwoDecimals() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "2.111")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("deliveryError", "Delivery budget must be a positive number in the form 5.99"));
    }

    @Test
    void postBudgetForm_invalidInput_miscellaneousTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "10000000")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("miscellaneousError", "Miscellaneous budget must be less than $10,000,000"));
    }

    @Test
    void postBudgetForm_invalidInput_materialTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "10000000")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("materialError", "Material budget must be less than $10,000,000"));
    }

    @Test
    void postBudgetForm_invalidInput_labourTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "10000000")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("labourError", "Labour budget must be less than $10,000,000"));
    }

    @Test
    void postBudgetForm_invalidInput_equipmentTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "10000000")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("equipmentError", "Equipment budget must be less than $10,000,000"));
    }

    @Test
    void postBudgetForm_invalidInput_professionalServicesTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "10000000")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("professionalServiceError", "Professional Service budget must be less than $10,000,000"));
    }

    @Test
    void postBudgetForm_invalidInput_permitTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "10000000")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("permitError", "Permit budget must be less than $10,000,000"));
    }

    @Test
    void postBudgetForm_invalidInput_cleanupTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "10000000")
                        .param("deliveryBudget", "")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("cleanupError", "Cleanup budget must be less than $10,000,000"));
    }

    @Test
    void postBudgetForm_invalidInput_deliveryTenMillion() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Renovation testRenovation = new Renovation("Test Renovation", "Description");
        testRenovation.setOwner(mockUser);
        renovationRepository.save(testRenovation);

        mockMvc.perform(post("/renovation/{id}/editBudget", testRenovation.getId())
                        .param("miscellaneousBudget", "")
                        .param("materialBudget", "")
                        .param("labourBudget", "")
                        .param("equipmentBudget", "")
                        .param("professionalServiceBudget", "")
                        .param("permitBudget", "")
                        .param("cleanupBudget", "")
                        .param("deliveryBudget", "10000000")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(view().name("pages/renovation/editBudgetPage"))
                .andExpect(model().attribute("deliveryError", "Delivery budget must be less than $10,000,000"));
    }

    @Test
    void viewRenovation_NoExpensesExist_CorrectExpenditureDisplayed() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        mockMvc.perform(get("/renovation/{id}/expenses", renovation.getId())
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("expenseTotal", new BigDecimal("0.00")))
                .andExpect(model().attribute("expenses", hasSize(0)));
    }

    @Test
    void viewRenovation_ExpensesExist_CorrectExpenditureDisplayed() throws Exception {
        List<User> users = userRepository.findByEmail("user@test.com");
        User mockUser = users.getFirst();

        Task task = new Task(renovation, "Task Name", "Task Description", "icon.png");
        renovation.addTask(task);
        renovationRepository.save(renovation);

        Expense expense1 = new Expense(task, "Test Expense", ExpenseCategory.MISCELLANEOUS, new BigDecimal("100"), LocalDate.now());
        expenseRepository.save(expense1);
        Expense expense2 = new Expense(task, "Test Expense", ExpenseCategory.MISCELLANEOUS, new BigDecimal("200"), LocalDate.now());
        expenseRepository.save(expense2);
        Expense expense3 = new Expense(task, "Test Expense", ExpenseCategory.MISCELLANEOUS, new BigDecimal("300"), LocalDate.now());
        expenseRepository.save(expense3);

        mockMvc.perform(get("/renovation/{id}/expenses", renovation.getId())
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("expenseTotal", new BigDecimal("600.00")))
                .andExpect(model().attribute("expenses", hasSize(3)))
                .andExpect(model().attribute("expenses", containsInAnyOrder(
                        expense1, expense2, expense3
                )));
    }

    @Test
    @WithMockUser(username = "1")
    void getMyRenovations_filterAnyone_seeNoRenovations() throws Exception {
        List<User> users = userRepository.findByEmail("anotherUser@test.com");
        User mockUser = users.getFirst();

        mockMvc.perform(get("/myRenovations").param("ownershipFilter", "ALL")
                        .with(csrf())
                        .with(user(String.valueOf(mockUser.getId())).password(mockUser.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("pagination", hasProperty("items", hasSize(0))));
    }

    @Test
    void getMyRenovations_filterAnyone_seeRenovationsIamMemberof() throws Exception {
        User user = userRepository.findByEmail("anotherUser@test.com").getFirst();
        renovation.addMember(user, RenovationMemberRole.MEMBER);
        renovationRepository.save(renovation);
        mockMvc.perform(get("/myRenovations")
                        .param("ownershipFilter", "ALL")
                        .with(user(String.valueOf(user.getId())).password(user.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("pagination", hasProperty("items", hasSize(1))));
    }

    @Test
    void getMyRenovations_filterOthers_seeRenovationsIamMemberof() throws Exception {
        User user = userRepository.findByEmail("anotherUser@test.com").getFirst();
        renovation.addMember(user, RenovationMemberRole.MEMBER);
        renovationRepository.save(renovation);
        mockMvc.perform(get("/myRenovations")
                        .param("ownershipFilter", "SHARED_WITH_ME")
                        .with(user(String.valueOf(user.getId())).password(user.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("pagination", hasProperty("items", hasSize(1))));
    }

    @Test
    void getMyRenovations_filterOwn_seeOnlyRenovationsIMade() throws Exception {
        User user = userRepository.findByEmail("anotherUser@test.com").getFirst();
        renovation.addMember(user, RenovationMemberRole.MEMBER);
        renovationRepository.save(renovation);
        mockMvc.perform(get("/myRenovations")
                        .param("ownershipFilter", "OWNED_BY_ME")
                        .with(user(String.valueOf(user.getId())).password(user.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("pagination", hasProperty("items", hasSize(0))));
    }

    @Test
    void getMyRenovations_filterAll_seeAllRenovationsICanAccess() throws Exception {
        User user = userRepository.findByEmail("anotherUser@test.com").getFirst();
        Renovation newRenovation = new Renovation("NewReno", "going to add user 1 as owner");
        newRenovation.setOwner(user);

        user = userRepository.findByEmail("user@test.com").getFirst();
        newRenovation.addMember(user, RenovationMemberRole.MEMBER);
        renovationRepository.save(newRenovation);


        mockMvc.perform(get("/myRenovations")
                        .param("ownershipFilter", "ALL")
                        .with(user(String.valueOf(user.getId())).password(user.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("pagination", hasProperty("items", hasSize(2))));
    }

    @Test
    void getMyRenovations_filterOthers_seeNoRenovations() throws Exception {
        User user = userRepository.findByEmail("anotherUser@test.com").getFirst();

        mockMvc.perform(get("/myRenovations")
                        .param("ownershipFilter", "SHARED_WITH_ME")
                        .with(user(String.valueOf(user.getId())).password(user.getPassword()).roles("USER")))
                .andExpect(status().isOk())
                .andExpect(model().attribute("pagination", hasProperty("items", hasSize(0))));
    }

    @Test
    void ownerUser_accessOwnPrivateRenovationTheyHaventBefore_logsNewRarEntry() throws Exception {
        assertEquals(Optional.empty(), recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, ownerUser));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + privateRenovation.getId())
                    .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, ownerUser);
        assertTrue(rarOpt.isPresent());

        RecentlyAccessedRenovation rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void ownerUser_accessOwnPublicRenovationTheyHaventBefore_logsNewRarEntry() throws Exception {
        assertEquals(Optional.empty(), recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, ownerUser));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + publicRenovation.getId())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, ownerUser);
        assertTrue(rarOpt.isPresent());

        RecentlyAccessedRenovation rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void ownerUser_accessOwnPrivateRenovationTheyHaveBefore_logsNewRarEntry() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovation = new RecentlyAccessedRenovation(ownerUser, privateRenovation);
        recentlyAccessedRenovation.setTimeAccessed(LocalDateTime.of(2025, 9, 17, 15, 30, 0));
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovation);
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, ownerUser);
        assertTrue(rarOpt.isPresent());
        RecentlyAccessedRenovation rar = rarOpt.get();
        assertTrue(rar.getTimeAccessed().isBefore(LocalDateTime.now()));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + privateRenovation.getId())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, ownerUser);
        assertTrue(rarOpt.isPresent());

        rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void ownerUser_accessOwnPublicRenovationTheyHaveBefore_logsNewRarEntry() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovation = new RecentlyAccessedRenovation(ownerUser, publicRenovation);
        recentlyAccessedRenovation.setTimeAccessed(LocalDateTime.of(2025, 9, 17, 15, 30, 0));
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovation);
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, ownerUser);
        assertTrue(rarOpt.isPresent());
        RecentlyAccessedRenovation rar = rarOpt.get();
        assertTrue(rar.getTimeAccessed().isBefore(LocalDateTime.now()));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + publicRenovation.getId())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, ownerUser);
        assertTrue(rarOpt.isPresent());

        rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void memberUser_accessPrivateRenovationTheyHaventBefore_logsNewRarEntry() throws Exception {
        assertEquals(Optional.empty(), recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, memberUser));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + privateRenovation.getId())
                        .with(user(String.valueOf(memberUser.getId())).password(memberUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, memberUser);
        assertTrue(rarOpt.isPresent());

        RecentlyAccessedRenovation rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void memberUser_accessPublicRenovationTheyHaventBefore_logsNewRarEntry() throws Exception {
        assertEquals(Optional.empty(), recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, memberUser));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + publicRenovation.getId())
                        .with(user(String.valueOf(memberUser.getId())).password(memberUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, memberUser);
        assertTrue(rarOpt.isPresent());

        RecentlyAccessedRenovation rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void memberUser_accessPrivateRenovationTheyHaveBefore_logsNewRarEntry() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovation = new RecentlyAccessedRenovation(memberUser, privateRenovation);
        recentlyAccessedRenovation.setTimeAccessed(LocalDateTime.of(2025, 9, 17, 15, 30, 0));
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovation);
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, memberUser);
        assertTrue(rarOpt.isPresent());
        RecentlyAccessedRenovation rar = rarOpt.get();
        assertTrue(rar.getTimeAccessed().isBefore(LocalDateTime.now()));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + privateRenovation.getId())
                        .with(user(String.valueOf(memberUser.getId())).password(memberUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, memberUser);
        assertTrue(rarOpt.isPresent());

        rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void memberUser_accessPublicRenovationTheyHaveBefore_logsNewRarEntry() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovation = new RecentlyAccessedRenovation(memberUser, publicRenovation);
        recentlyAccessedRenovation.setTimeAccessed(LocalDateTime.of(2025, 9, 17, 15, 30, 0));
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovation);
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, memberUser);
        assertTrue(rarOpt.isPresent());
        RecentlyAccessedRenovation rar = rarOpt.get();
        assertTrue(rar.getTimeAccessed().isBefore(LocalDateTime.now()));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + publicRenovation.getId())
                        .with(user(String.valueOf(memberUser.getId())).password(memberUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, memberUser);
        assertTrue(rarOpt.isPresent());

        rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void nonMemberUser_accessPublicRenovationTheyHaventBefore_logsNewRarEntry() throws Exception {
        assertEquals(Optional.empty(), recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, nonMemberUser));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + publicRenovation.getId())
                        .with(user(String.valueOf(nonMemberUser.getId())).password(nonMemberUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, nonMemberUser);
        assertTrue(rarOpt.isPresent());

        RecentlyAccessedRenovation rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void nonMemberUser_accessPublicRenovationTheyHaveBefore_logsNewRarEntry() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovation = new RecentlyAccessedRenovation(nonMemberUser, publicRenovation);
        recentlyAccessedRenovation.setTimeAccessed(LocalDateTime.of(2025, 9, 17, 15, 30, 0));
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovation);
        Optional<RecentlyAccessedRenovation> rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, nonMemberUser);
        assertTrue(rarOpt.isPresent());
        RecentlyAccessedRenovation rar = rarOpt.get();
        assertTrue(rar.getTimeAccessed().isBefore(LocalDateTime.now()));
        LocalDateTime beforeTime = LocalDateTime.now();

        mockMvc.perform(get("/renovation/" + publicRenovation.getId())
                        .with(user(String.valueOf(nonMemberUser.getId())).password(nonMemberUser.getPassword()).roles("USER")))
                .andExpect(status().isOk());

        LocalDateTime afterTime = LocalDateTime.now();
        rarOpt = recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, nonMemberUser);
        assertTrue(rarOpt.isPresent());

        rar = rarOpt.get();
        assertFalse(rar.getTimeAccessed().isBefore(beforeTime));
        assertFalse(rar.getTimeAccessed().isAfter(afterTime));
    }

    @Test
    void notLoggedIn_accessPublicRenovation_noLogForRarEntry() throws Exception {
        int numAccesses = recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(publicRenovation.getId()).size();

        mockMvc.perform(get("/renovation/" + publicRenovation.getId()))
                .andExpect(status().isOk());

        assertEquals(numAccesses, recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(publicRenovation.getId()).size());
        verify(recentlyAccessedRenovationRepository, times(0)).save(any());
    }

    @Test
    void privateRenovationAccessedByAll_renovationDeleted_allRarsForRenovationDeleted() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovationOwner = new RecentlyAccessedRenovation(ownerUser, privateRenovation);
        RecentlyAccessedRenovation recentlyAccessedRenovationMember = new RecentlyAccessedRenovation(memberUser, privateRenovation);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationOwner);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationMember);
        assertEquals(2, recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(privateRenovation.getId()).size());

        mockMvc.perform(post("/delete")
                        .param("renovationInstance", "" + privateRenovation.getId())
                        .param("previousUrl", "")
                        .header("referer", "")
                        .with(csrf())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection());

        assertEquals(0, recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(privateRenovation.getId()).size());
    }

    @Test
    void publicRenovationAccessedByAll_renovationDeleted_allRarsForRenovationDeleted() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovationOwner = new RecentlyAccessedRenovation(ownerUser, publicRenovation);
        RecentlyAccessedRenovation recentlyAccessedRenovationMember = new RecentlyAccessedRenovation(memberUser, publicRenovation);
        RecentlyAccessedRenovation recentlyAccessedRenovationNonMember = new RecentlyAccessedRenovation(nonMemberUser, publicRenovation);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationOwner);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationMember);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationNonMember);
        assertEquals(3, recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(publicRenovation.getId()).size());

        mockMvc.perform(post("/delete")
                        .param("renovationInstance", "" + publicRenovation.getId())
                        .param("previousUrl", "")
                        .header("referer", "")
                        .with(csrf())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection());

        assertEquals(0, recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(publicRenovation.getId()).size());
    }

    @Test
    void publicRenovationAccessedByAll_renovationSetToPrivate_NonMemberRarDeleted() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovationOwner = new RecentlyAccessedRenovation(ownerUser, publicRenovation);
        RecentlyAccessedRenovation recentlyAccessedRenovationMember = new RecentlyAccessedRenovation(memberUser, publicRenovation);
        RecentlyAccessedRenovation recentlyAccessedRenovationNonMember = new RecentlyAccessedRenovation(nonMemberUser, publicRenovation);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationOwner);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationMember);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationNonMember);
        assertEquals(3, recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(publicRenovation.getId()).size());

        mockMvc.perform(post("/renovation/{id}/setVisibility", publicRenovation.getId())
                        .param("isPublic", "false")
                        .with(csrf())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/renovation/" + publicRenovation.getId()));

        assertEquals(2, recentlyAccessedRenovationRepository.findAllRecentlyAccessedRenovationsByRenovationId(publicRenovation.getId()).size());
        assertTrue(recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, ownerUser).isPresent());
        assertTrue(recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, memberUser).isPresent());
        assertFalse(recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, nonMemberUser).isPresent());
    }

    @Test
    void publicRenovationMemberAccessed_memberDeleted_memberRarNotDeleted() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovationMember = new RecentlyAccessedRenovation(memberUser, publicRenovation);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationMember);
        assertTrue(recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, memberUser).isPresent());

        mockMvc.perform(post("/renovation/" + publicRenovation.getId() + "/removeMember")
                        .param("renovationUser", String.valueOf(memberUser.getId()))
                        .with(csrf())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection());

        assertTrue(recentlyAccessedRenovationRepository.findByRenovationAndUser(publicRenovation, memberUser).isPresent());
    }

    @Test
    void privateRenovationMemberAccessed_memberDeleted_memberRarDeleted() throws Exception {
        RecentlyAccessedRenovation recentlyAccessedRenovationMember = new RecentlyAccessedRenovation(memberUser, privateRenovation);
        recentlyAccessedRenovationRepository.save(recentlyAccessedRenovationMember);
        assertTrue(recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, memberUser).isPresent());

        mockMvc.perform(post("/renovation/" + privateRenovation.getId() + "/removeMember")
                        .param("renovationUser", String.valueOf(memberUser.getId()))
                        .with(csrf())
                        .with(user(String.valueOf(ownerUser.getId())).password(ownerUser.getPassword()).roles("USER")))
                .andExpect(status().is3xxRedirection());

        assertFalse(recentlyAccessedRenovationRepository.findByRenovationAndUser(privateRenovation, memberUser).isPresent());
    }
}
