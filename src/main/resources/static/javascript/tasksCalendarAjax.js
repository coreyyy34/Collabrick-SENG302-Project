/**
 * Binds click listeners to elements with the .month-nav class. When clicked, it will trigger fetching the
 * calendar the next or previous month.
 */
const bindCalendarNavigation = () => {
    document.querySelectorAll(".month-nav").forEach(button => {
        button.addEventListener("click", () => {
            const month = button.getAttribute("data-month");
            const year = button.getAttribute("data-year");
            loadCalendar(year, month);
        });
    });
}


/**
 * Prevent task form from opening on single click, only opens on double click
 */
const preventNewTaskDirect = () => {
    const calendarCells = document.querySelectorAll('.calendar-cell');
    calendarCells.forEach(function (calendarCell) {
        calendarCell.addEventListener('click', function (event) {
            event.preventDefault();
        })
    })
    calendarCells.forEach(function (calendarCell) {
        calendarCell.addEventListener('dblclick', function (event) {
            event.preventDefault();
            const url = calendarCell.getAttribute('data-new-tag-url')
            if (url) {
                window.location = url;
            }
        })
    })
}

/**
 * Controls the show more items button on the calendar when there are more than 3 tasks
 */
const bindShowMoreItemsButton = () => {
    document.querySelectorAll(".calendar-items-show-more").forEach(showMoreButton => {
        showMoreButton.addEventListener("click", () => {
            const day = showMoreButton.getAttribute('data-day');
            const hiddenItems = document.querySelectorAll(".extra-item-" + day);
            const showMoreLabel = showMoreButton.querySelector(".show-more-label");
            const isHidden = hiddenItems[0]?.classList.contains("d-none");

            hiddenItems.forEach(item => item.classList.toggle("d-none"))

            if (isHidden) {
                showMoreLabel.textContent = "Show less tasks";
            } else {
                showMoreLabel.textContent = `Show ${hiddenItems.length} more task${hiddenItems.length > 1 ? "s" : ""}`;
            }
        })
    })
}

/**
 * Loads the calendar HTML for the given year and month. Regex generated by ChatGPT
 *
 * @param year - The year to load.
 * @param month - The month to load.
 * @param day - The day of month to highlight
 */
const loadCalendar = (year, month, day) => {
    const endpoint = window.location.pathname.toLowerCase().includes("renovation") ? "myRenovations" : "browse"

    const ajax = new AjaxHelper("myRenovations/" + id, "tasks-calendar/" + id);
    ajax.setParam("month", month);
    ajax.setParam("year", year);

    if (day != null) {
        ajax.setParam("day", day);
    } else {
        ajax.removeParam("day");
    }

    ajax.fetchHtmlAndUpdate("#calendar", ["month", "year"]).then(() => {
        bindCalendarNavigation();
        bindShowMoreItemsButton();
        if (isMember) {
            preventNewTaskDirect();
        }
        modalOpeners()
    });
}

/**
 * On initial page load, extract the month/year from the query string and load the calendar.
 */
document.addEventListener("DOMContentLoaded", () => {
    const searchParams = new URLSearchParams(window.location.search);
    if( year === "") {year = searchParams.get("year");}
    if( month === "") {month = searchParams.get("month");}
    const day = searchParams.get("day");
    loadCalendar(year, month, day);
})

/**
 * Controls what happens when clicking/double-clicking on a task in the calendar
 */
const modalOpeners = () => {
    const buttons = document.querySelectorAll(".calendar-item");
    // GPT'd the idea to use a global array to track any timers
    window.__modalTimers = window.__modalTimers || [];

    buttons.forEach(function (button) {
        let modalTimer = null;

        button.addEventListener('click', function (e) {
            const targetId = button.getAttribute('data-bs-target');
            const modalElement = document.querySelector(targetId);

            modalTimer = setTimeout(() => {
                const taskModal = new bootstrap.Modal(modalElement);
                taskModal.show();

                if (modalTimer !== null) {
                    clearTimeout(modalTimer);
                    modalTimer = null;
                }
            }, 250);

            window.__modalTimers.push(modalTimer);
        });
        if (isMember) {

            button.addEventListener('dblclick', function (e) {
                e.stopPropagation();
                e.preventDefault();

                if (modalTimer !== null) {
                    clearTimeout(modalTimer);
                    modalTimer = null;
                }

                const editUrl = button.getAttribute('data-edit-task-url');
                if (editUrl !== undefined && editUrl !== null) {
                    window.location = editUrl;
                }
            });
        }
    });
}

/**
 * When the page is loaded from cache, removes the modal timers to prevent them from appearing when they shouldn't
 */
window.addEventListener('pageshow', (event) => {
    // Clear all modal timers globally
    if (window.__modalTimers && window.__modalTimers.length > 0) {
        window.__modalTimers.forEach(timeoutId => clearTimeout(timeoutId));
        window.__modalTimers = [];
    }
});

