/**
 * A helper class for building and performing AJAX requests while preserving and manipulating the URL query params.
 * Partially generated by ChatGPT and modified to fit our needs.
 */
class AjaxHelper {
    /**
     * Constructs the helper with the matched base path and desired endpoint.
     *
     * @param endpoint - The endpoint to update the url with
     * @param apiEndpoint - The AJAX endpoint path (e.g., `/tasks-calendar`).
     */
    constructor(endpoint, apiEndpoint) {
        this.baseUrl = document.getElementById('app-data').dataset.baseUrl;
        this.endpoint = endpoint;
        this.apiEndpoint = apiEndpoint;
        this.searchParams = new URLSearchParams(window.location.search);
    }

    /**
     * Sets a query param for the AJAX request. Ignores null and undefined values.
     *
     * @param key
     * @param value
     */
    setParam(key, value) {
        if (value !== null && value !== undefined) {
            this.searchParams.set(key, value);
        }
    }

    /**
     * Gets a query param value from the current search string.
     *
     * @param key - The param name.
     * @returns {string} The value of null if not found.
     */
    getParam(key) {
        return this.searchParams.get(key);
    }


    /**
     * Removes a query param from the request.
     *
     * @param key - The param name to remove.
     */
    removeParam(key) {
        this.searchParams.delete(key);
    }

    /**
     * Builds the full URL for the AJAX request.
     *
     * @returns {string} The full URL.
     */
    getFullAPIUrl() {
        return `${this.baseUrl}${this.apiEndpoint}?${this.searchParams.toString()}`;
    }

    /**
     * Builds the full redirect URL.
     *
     * @returns {string} The full URL.
     */
    getFullUrl() {
        return `${this.baseUrl}${this.endpoint}?${this.searchParams.toString()}`;
    }

    /**
     * Fetches HTML from the built-in URL and replaces the inner HTML of the target element. Optionally updates the
     * browser's URL if the server responds with a redirect that changes specific query parameters.
     *
     * @param targetSelector - A selector for the DOM to update.
     * @param {string[]} [updatableParams=[]] - Optional list of query parameters to synchronize from the request
     *                                          URL to the browser's URL. If not provided, the URL will not be updated.
     * @returns {Promise<void>} - A promise that resolves when the content is updated, so we can use await.
     */
    fetchHtmlAndUpdate(targetSelector, updatableParams = []) {
        return fetch(this.getFullAPIUrl())
            .then(response => {
                const finalUrl = response.url

                return response.text().then(html => {
                    document.querySelector(targetSelector).innerHTML = html;

                    // synchronize the url query params
                    // (e.g., will update the year and month query params when fetching calendar,
                    // also handles redirections on invalid inputs)
                    if (updatableParams.length > 0) {
                        const currentUrl = new URL(window.location.href);
                        const newUrl = new URL(finalUrl);

                        let changed = false;
                        for (const param of updatableParams) {
                            const newValue = newUrl.searchParams.get(param);
                            const oldValue = currentUrl.searchParams.get(param);

                            if (newValue !== oldValue) {
                                if (newValue !== null) {
                                    currentUrl.searchParams.set(param, newValue);
                                } else {
                                    currentUrl.searchParams.delete(param);
                                }
                                changed = true;
                            }
                        }

                        if (changed) {
                            window.history.replaceState({}, "", currentUrl.pathname + "?" + currentUrl.searchParams.toString());
                        }
                    }
                })
            })
    }
}
