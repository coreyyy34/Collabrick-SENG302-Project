package nz.ac.canterbury.seng302.homehelper.service.chat;

import nz.ac.canterbury.seng302.homehelper.entity.chat.ChatLink;
import nz.ac.canterbury.seng302.homehelper.entity.chat.ChatMention;
import nz.ac.canterbury.seng302.homehelper.entity.chat.ChatMessage;
import nz.ac.canterbury.seng302.homehelper.entity.user.User;
import nz.ac.canterbury.seng302.homehelper.model.chat.fragment.ChatMessageFragment;
import nz.ac.canterbury.seng302.homehelper.model.chat.fragment.ChatMessageFragmentLink;
import nz.ac.canterbury.seng302.homehelper.model.chat.fragment.ChatMessageFragmentMention;
import nz.ac.canterbury.seng302.homehelper.model.chat.fragment.ChatMessageFragmentText;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Service
public class ChatFragmentService {


    // example docstring generated by GPT
    /**
     * Parses a ChatMessage and extracts its content into a list of structured fragments.
     * Mentions are replaced with a ChatMessageFragmentMention objects, and surrounding text is preserved
     * as ChatMessageFragmentText objects
     * This will only work if chat has only links or only mentions, not both.
     *
     * <p>Example:
     * <pre>
     *     Message: "Hi @Alice, please meet @Bob."
     *     Mentions: [Alice (start=3, end=9), Bob (start=22, end=27)]
     *     Result: [
     *         Text("Hi "),
     *         Mention(Alice),
     *         Text(", please meet "),
     *         Mention(Bob),
     *         Text(".")
     *     ]
     * </pre>
     *
     * @param message the chat message containing raw content and mentions
     * @return a list of chat message fragments representing the parsed message
     */
    public List<ChatMessageFragment> extractFragmentsFromMessage(ChatMessage message) {
        String content = message.getContent();
        List<ChatMention> mentions = message.getMentions();
        List<ChatLink> links = message.getLinks();
        // ensure mentions are sorted by start index
        mentions.sort(Comparator.comparingInt(ChatMention::getStartPosition));

        List<ChatMessageFragment> fragments = new ArrayList<>();
        int currentIndex = 0;

        for (ChatMention mention : mentions) {
            // add text before the mention if there is any
            if (mention.getStartPosition() > currentIndex) {
                String text = content.substring(currentIndex, mention.getStartPosition());
                fragments.add(new ChatMessageFragmentText(text));
            }

            // add the mention fragment
            User mentionedUser = mention.getMentionedUser();
            fragments.add(new ChatMessageFragmentMention(
                    mentionedUser.getId(),
                    mentionedUser.getFullName()
            ));

            // move current index forward to skip mention
            currentIndex = mention.getEndPosition() + 1;
        }

        for (ChatLink link : links) {
            if (link.getStartPosition() > currentIndex) {
                String text = content.substring(currentIndex, link.getStartPosition());
                fragments.add(new ChatMessageFragmentText(text));
            }

            fragments.add(new ChatMessageFragmentLink(link.getLink(), link.getText()));
            currentIndex = link.getEndPosition() + 1;

        }

        // add any remaining text after the last mention
        // if there are no mentions, the whole message content is added as a single fragment
        if (currentIndex < content.length()) {
            fragments.add(new ChatMessageFragmentText(content.substring(currentIndex)));
        }

        return fragments;
    }


}
