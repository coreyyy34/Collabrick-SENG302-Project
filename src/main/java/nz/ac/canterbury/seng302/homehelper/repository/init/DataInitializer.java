package nz.ac.canterbury.seng302.homehelper.repository.init;

import jakarta.transaction.Transactional;
import nz.ac.canterbury.seng302.homehelper.entity.chat.ChatChannel;
import nz.ac.canterbury.seng302.homehelper.entity.renovation.*;
import nz.ac.canterbury.seng302.homehelper.entity.user.User;
import nz.ac.canterbury.seng302.homehelper.model.renovation.ExpenseCategory;
import nz.ac.canterbury.seng302.homehelper.model.renovation.InvitationStatus;
import nz.ac.canterbury.seng302.homehelper.model.renovation.RenovationMemberRole;
import nz.ac.canterbury.seng302.homehelper.model.renovation.TaskState;
import nz.ac.canterbury.seng302.homehelper.repository.renovation.InvitationRepository;
import nz.ac.canterbury.seng302.homehelper.repository.renovation.RenovationRepository;
import nz.ac.canterbury.seng302.homehelper.repository.renovation.RoomRepository;
import nz.ac.canterbury.seng302.homehelper.repository.user.UserRepository;
import nz.ac.canterbury.seng302.homehelper.service.renovation.InvitationService;
import nz.ac.canterbury.seng302.homehelper.service.renovation.BrickAiService;
import nz.ac.canterbury.seng302.homehelper.service.renovation.RenovationService;
import nz.ac.canterbury.seng302.homehelper.service.chat.ChatChannelService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.io.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Data generated by ChatGPT. Used for prepopulating the database.
 */
@Component
@Profile("!test")
public class DataInitializer implements CommandLineRunner {

    private final InvitationService invitationService;
    Logger logger = LoggerFactory.getLogger(DataInitializer.class);
    private final RenovationRepository renovationRepository;
    private final UserRepository userRepository;
    private final RoomRepository roomRepository;
    private final PasswordEncoder passwordEncoder;
    private static final TaskState[] TASK_STATES = TaskState.values();
    private final InvitationRepository invitationRepository;
    private final RenovationService renovationService;
    private final ChatChannelService chatChannelService;
    private final BrickAiService brickAiService;

    /**
     * DataInitializer constructor.
     *
     * @param renovationRepository RenovationRepository object
     * @param userRepository       UserRepository object
     * @param roomRepository       RoomRepository object
     * @param passwordEncoder      PasswordEncoder object
     */
    @Autowired
    public DataInitializer(RenovationRepository renovationRepository, UserRepository userRepository,
                           RoomRepository roomRepository, PasswordEncoder passwordEncoder,
                           InvitationRepository invitationRepository, RenovationService renovationService,
                           InvitationService invitationService, ChatChannelService chatChannelService,
                           BrickAiService brickAiService) {
        this.renovationRepository = renovationRepository;
        this.userRepository = userRepository;
        this.roomRepository = roomRepository;
        this.passwordEncoder = passwordEncoder;
        this.invitationRepository = invitationRepository;
        this.renovationService = renovationService;
        this.invitationService = invitationService;
        this.chatChannelService = chatChannelService;
        this.brickAiService = brickAiService;
    }


    /**
     * Perform initial data injection.
     *
     * @param args Args
     */
    @Override
    @Transactional
    public void run(String... args) {
        if (userRepository.count() != 0)
            return;

        // Add BrickAI user to the DB so he can be added to all chat channel
        brickAiService.createAiUser();

        // This user has no Renovations, but has worked on the Luxury Bathroom Remodel renovation with user Jane Doe
        User emptyUserJohn = createDefaultUser("John", "Lee", "john.lee@gmail.com", "Abc123!!");
        emptyUserJohn = userRepository.save(emptyUserJohn);

        // This user has no Renovations, but has worked on the Modern Kitchen Remodel renovation with user Jane Doe
        User emptyUserSam = createDefaultUser("Sam", "Smith", "sam.smith@gmail.com", "Abc123!!");
        emptyUserSam = userRepository.save(emptyUserSam);

        // This user has no Renovations, but has worked on the Modern Kitchen Remodel renovation with user Jane Doe
        User emptyUserBen = createDefaultUser("Ben", "Benjamin", "ben.benjamin@gmail.com", "Abc123!!");
        emptyUserBen = userRepository.save(emptyUserBen);

        // This user has no Renovations, but has worked on the Modern Kitchen Remodel renovation with user Jane Doe
        User emptyUserJerry = createDefaultUser("Jerry", "Brown", "jerry.brownjamin@gmail.com", "Abc123!!");
        emptyUserJerry = userRepository.save(emptyUserJerry);

        // This user has no Renovations, but has worked on the Luxury Bathroom Remodel renovation with user Jane Doe and invited to Modern Kitchen Remodel
        User emptyUserSusan = createDefaultUser("Susan", "Susanson", "susan.susanson@gmail.com", "Abc123!!");
        emptyUserSusan = userRepository.save(emptyUserSusan);

        // This user has no Renovations, and is a member of the Modern Kitchen Remodel renovation
        User emptyUserSandy = createDefaultUser("Sandy", "Olsson", "sandy.olsson@gmail.com", "Abc123!!");
        emptyUserSandy = userRepository.save(emptyUserSandy);

        // This user has no Renovations, and is invited to Luxury Bathroom remodel
        User emptyUserMindy = createDefaultUser("Mindy", "Samson", "mindy.sampson@gmail.com", "Abc123!!");
        emptyUserMindy = userRepository.save(emptyUserMindy);

        // This user has no Renovations, and is a member of Luxury Bathroom Remodel
        User emptyUserMike = createDefaultUser("Mike", "Ramsey", "mike.ramsey@gmail.com", "Abc123!!");
        emptyUserMike = userRepository.save(emptyUserMike);

        // This user has no Renovations, and is invited to Modern Kitchen remodel
        User emptyUserSadie = createDefaultUser("Sadie", "Miller", "sadie.miller@gmail.com", "Abc123!!");
        emptyUserSadie = userRepository.save(emptyUserSadie);

        // This user has no Renovations, but has worked on the Luxury Bathroom Remodel renovation with user Jane Doe and invited to Modern Kitchen Remodel
        User emptyUserMichael = createDefaultUser("Michael", "Tanner", "michael.tanner@gmail.com", "Abc123!!");
        emptyUserMichael = userRepository.save(emptyUserMichael);

        // This user has no Renovations, but has worked on the Luxury Bathroom Remodel renovation with user Jane Doe and invited to Modern Kitchen Remodel
        User emptyUserMary = createDefaultUser("Mary", "Poppins", "mary.poppins@gmail.com", "Abc123!!");
        emptyUserMary = userRepository.save(emptyUserMary);

        // All renovations for this user are private
        User user = createDefaultUser("Jane", "Doe", "jane.doe@gmail.com", "Abc123!!");
        user = userRepository.save(user);

        // All renovations for this user are public, and they are a member of Modern Kitchen Remodel and
        // is invited to Luxury Bathroom Remodel.
        User publicUser = createDefaultUser("Bob", "Smith", "bob.smith@gmail.com", "Abc123!!");
        publicUser = userRepository.save(publicUser);

        try {
            insertFromCsv(user, "static/data/InitialRenovationData.csv");
            insertFromCsv(publicUser, "static/data/InitialPublicRenovationData.csv");
            // All data in these files is generated by ChatGPT and manually sanity-checked for formatting compliance
        } catch (IOException e) {
            logger.info(e.getMessage());
        }

        createKitchenRenovation(user,
                List.of(emptyUserSam, emptyUserBen, emptyUserJerry, emptyUserSandy),
                List.of(publicUser.getEmail(), emptyUserSusan.getEmail(), "hayden.topperwien@gmail.com", emptyUserMichael.getEmail(), emptyUserMary.getEmail(), emptyUserSadie.getEmail(),
                        "sarah.sarahson@gmail.com"));

        createBathroomRenovation(user,
                List.of(publicUser, emptyUserJohn, emptyUserSusan, emptyUserMichael, emptyUserMary, emptyUserMike),
                List.of("sophia.copley@gmail.com", emptyUserMindy.getEmail(), "matilda.wormwood@gmail.com", "samantha.giddens@gmail.com"));

    }

    /**
     * Create a default user who will own all pre-populated Renovations.
     *
     * @return Default User object
     */
    private User createDefaultUser(String firstName, String lastName, String email, String password) {
        String encodedPassword = passwordEncoder.encode(password);
        User user = new User(firstName, lastName, email, encodedPassword, encodedPassword);
        user.setActivated(true);
        return user;
    }

    /**
     * Inserts a new renovation as part of data initialization.
     * Renovation is created with supplied parameters.
     *
     * @param user        Renovation's owner
     * @param name        Renovation's name
     * @param description Renovation's description
     * @param taskList    List of Renovation tasks
     */
    private void insertRenovation(User user, String name, String description, List<Task> taskList, List<String> roomList, List<String> tagList, Boolean isPublic) {
        // Create reno
        Renovation renovation = new Renovation(name, description);
        renovation.setPublic(isPublic);
        renovation = renovationService.createRenovation(renovation, roomList, user);

        // Create tasks
        for (Task task : taskList) {
            task.setRenovation(renovation);
            renovation.addTask(task);
            task.setState(getRandomTaskState());
            task.setDueDate(getRandomDateBetween(LocalDate.of(2025, 7, 19), LocalDate.of(2025, 8, 30)));
        }

        // Create tags
        for (String tagName : tagList) {
            Tag tag = new Tag(tagName, renovation);
            renovation.addTag(tag);
        }

        // Finalize
        renovationRepository.save(renovation);
    }

    /**
     * Insert Renovations by reading from a .csv file.
     *
     * @param user     Renovation's owner
     * @param filePath File path of .csv file
     * @throws IOException File read error
     */
    public void insertFromCsv(User user, String filePath) throws IOException {
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(filePath);
        if (inputStream == null) {
            // File not found
            throw new FileNotFoundException("File not found: {}" + filePath);
        }

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
            String header = reader.readLine();
            String line;

            // Read lines in sequence:
            while ((line = reader.readLine()) != null) {
                // Parse line
                String[] columns = parseLine(line);

                try {
                    // Pull columns into separate variables
                    String name = columns[0];
                    String description = columns[1];
                    List<String> rooms = Arrays.asList(columns[2].split(";"));
                    String[] taskNames = columns[3].split(";");
                    String[] taskDescs = columns[4].split(";");
                    String[] taskIcons = columns[5].split(";");
                    String[] tags = columns[6].split(";");
                    boolean isPublic = Boolean.parseBoolean(columns[7]);
                    // Format for adding expenses to CSV:
                    // Use ; to split tasks, use | to split expenses. Example: Recognize|Feeling;;Camera
                    String[] expenseNames = new String[0];
                    String[] expenseCosts = new String[0];
                    if (columns.length > 9) {
                        expenseNames = columns[8].split(";");
                        expenseCosts = columns[9].split(";");
                    }
                    logger.info("Creating new Renovation: {}", name);

                    // Create tasks
                    List<Task> tasks = new ArrayList<>();
                    for (int i = 0; i < taskNames.length; i++) {
                        Task task = new Task(null, taskNames[i].trim(), taskDescs[i].trim(), taskIcons[i].trim());

                        // Add expenses to task
                        if (i < expenseNames.length && i < expenseCosts.length &&
                                !expenseNames[i].isBlank() && !expenseCosts[i].isBlank()) {
                            String[] expenseNamesForTask = expenseNames[i].split("\\|");
                            String[] expenseCostsForTask = expenseCosts[i].split("\\|");

                            for (int j = 0; j < expenseNamesForTask.length; j++) {
                                BigDecimal cost = new BigDecimal(expenseCostsForTask[j]);
                                Expense expense = new Expense(task, expenseNamesForTask[j].trim(), ExpenseCategory.MISCELLANEOUS, cost, LocalDate.now());
                                task.addExpense(expense);
                            }
                        }
                        tasks.add(task);
                    }

                    // Make sure all tags are lowercase
                    List<String> lowercaseTags = new ArrayList<>();
                    for (String tag : tags) {
                        lowercaseTags.add(tag.toLowerCase());
                    }

                    //Insert data as a Renovation
                    insertRenovation(user, name, description, tasks, rooms, lowercaseTags, isPublic);
                } catch (ArrayIndexOutOfBoundsException e) {
                    logger.info(e.getMessage());
                }
            }
        } catch (IOException e) {
            // Something went wrong
            logger.info(e.getMessage());
        }
    }

    /**
     * Gets a random TaskState to add to a task
     *
     * @return a random TaskState
     */
    private TaskState getRandomTaskState() {
        return TASK_STATES[ThreadLocalRandom.current().nextInt(TASK_STATES.length)];
    }

    /**
     * Gets a random date between two dates inclusively
     *
     * @param start The earliest possible date
     * @param end   The latest possible date
     * @return a random date between the start and end date inclusively
     */
    public static LocalDate getRandomDateBetween(LocalDate start, LocalDate end) {
        long startDay = start.toEpochDay();
        long endDay = end.toEpochDay();

        long randomDay = ThreadLocalRandom.current().nextLong(startDay, endDay);
        return LocalDate.ofEpochDay(randomDay);
    }

    /**
     * Read a line of .csv file containing Renovation data.
     * Thank you to ChatGPT for this one.
     *
     * @param line Line from .csv to read
     * @return Array of elements from line, separated on commas
     */
    private String[] parseLine(String line) {
        List<String> tokens = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        boolean inQuotes = false;

        for (char c : line.toCharArray()) {
            if (c == '\"') {
                inQuotes = !inQuotes;
            } else if (c == ',' && !inQuotes) {
                tokens.add(sb.toString());
                sb.setLength(0);
            } else {
                sb.append(c);
            }
        }
        tokens.add(sb.toString());
        return tokens.toArray(new String[0]);
    }

    /**
     * Create the default "kitchen" Renovation with provided data.
     *
     * @param user           Default User object; Renovation's owner
     * @param usersToAdd     List of default User objects; Members
     * @param emailsToInvite List of email strings; Invitees
     */
    private void createKitchenRenovation(User user, List<User> usersToAdd, List<String> emailsToInvite) {
        Renovation renovation = new Renovation("Modern Kitchen Remodel",
                "Complete overhaul of the kitchen including new cabinets, countertops, and appliances. The goal is to create a more open and functional cooking space.");
        renovation = renovationService.createRenovation(renovation, List.of(), user);
        Optional<ChatChannel> optChannel = chatChannelService.findByRenovationAndName(renovation, "general");
        ChatChannel chatChannel = optChannel.get();

        for (User userToAdd : usersToAdd) {
            if (userToAdd != user) {
                renovation.addMember(userToAdd, RenovationMemberRole.MEMBER);
                chatChannelService.addMemberToChatChannel(chatChannel.getId(), userToAdd.getId());
                brickAiService.createAiChannel(renovation, userToAdd);
            }
        }

        for (int i = 0; i < emailsToInvite.size(); i++) {
            String email = emailsToInvite.get(i);
            Invitation invitation = invitationService.createInvite(email, renovation);
            if (i % 3 == 0) {
                invitation.setInvitationStatus(InvitationStatus.DECLINED);
            } else if (i % 4 == 0) {
                invitation.setInvitationStatus(InvitationStatus.EXPIRED);
            }
            invitationService.saveInvitation(invitation);
        }

        Room kitchen = new Room(renovation, "Kitchen");
        kitchen = roomRepository.save(kitchen);

        Task task1 = new Task(renovation, "Install new cabinets",
                "Replace old cabinets with custom-made, modern cabinets.", getRandomTaskState(), "carpentry.png");
        task1.setDueDate(LocalDate.of(2025, 7, 17));
        Expense expA = new Expense(task1, "Shiny new screws", ExpenseCategory.EQUIPMENT, new BigDecimal("10"), LocalDate.now());
        Expense expB = new Expense(task1, "Lumber", ExpenseCategory.EQUIPMENT, new BigDecimal("40"), LocalDate.now());
        task1.addExpense(expA);
        task1.addExpense(expB);
        renovation.addTask(task1);

        Task task2 = new Task(renovation, "Replace countertops with quartz",
                "Install durable and stylish quartz countertops to replace the old ones.", getRandomTaskState(), "house.png");
        task2.setDueDate(LocalDate.of(2025, 7, 16));
        Expense expC = new Expense(task2, "Installation fee", ExpenseCategory.LABOUR, new BigDecimal("1000.1"), LocalDate.now());
        Expense expD = new Expense(task2, "Countertops", ExpenseCategory.MATERIAL, new BigDecimal("2000"), LocalDate.now());
        Expense expE = new Expense(task2, "Snacks", ExpenseCategory.PROFESSIONAL_SERVICES, new BigDecimal("25.98"), LocalDate.now());
        task2.addExpense(expC);
        task2.addExpense(expD);
        task2.addExpense(expE);
        renovation.addTask(task2);

        Task task3 = new Task(renovation, "Upgrade appliances to energy-efficient models",
                "Replace old appliances with new energy-efficient models to save on electricity bills.", getRandomTaskState(), "electrical.png");
        task3.setDueDate(LocalDate.of(2025, 7, 11));
        renovation.addTask(task3);

        task1.getRooms().add(kitchen);
        task2.getRooms().add(kitchen);
        task3.getRooms().add(kitchen);

        renovation.addTask(task1);
        renovation.addTask(task2);
        renovation.addTask(task3);

        renovationRepository.save(renovation);
    }

    /**
     * Create the default "bathroom" Renovation with provided data.
     * Includes enough Tasks to demonstrate all pagination functionality as per NFRs.
     * Expense data was generated by ChatGPT and sanity-checked
     *
     * @param user           Default User object; Renovation's owner
     * @param usersToAdd     List of default User objects; Members
     * @param emailsToInvite List of email strings; Invitees
     */
    private void createBathroomRenovation(User user, List<User> usersToAdd, List<String> emailsToInvite) {
        Renovation renovation = new Renovation("Luxury Bathroom Remodel",
                "A complete renovation to transform the bathroom into a modern, luxury retreat with high-end fixtures, flooring, and a spa-like atmosphere.");

        renovation = renovationService.createRenovation(renovation, List.of(), user);

        Optional<ChatChannel> optChannel = chatChannelService.findByRenovationAndName(renovation, "general");
        ChatChannel chatChannel = optChannel.get();

        for (User userToAdd : usersToAdd) {
            if (userToAdd != user) {
                renovation.addMember(userToAdd, RenovationMemberRole.MEMBER);
                chatChannelService.addMemberToChatChannel(chatChannel.getId(), userToAdd.getId());
                brickAiService.createAiChannel(renovation, userToAdd);
            }
        }

        for (int i = 0; i < emailsToInvite.size(); i++) {
            String email = emailsToInvite.get(i);
            Invitation invitation = invitationService.createInvite(email, renovation);
            if (i % 3 == 0) {
                invitation.setInvitationStatus(InvitationStatus.DECLINED);
            } else if (i % 4 == 0) {
                invitation.setInvitationStatus(InvitationStatus.EXPIRED);
            }
            invitationService.saveInvitation(invitation);
        }


        Room bathroom = new Room(renovation, "Bathroom");
        bathroom = roomRepository.save(bathroom);

        // Create tasks for the bathroom renovation
        Task task1 = new Task(renovation, "Remove old bathtub and install a freestanding tub",
                "Remove the outdated bathtub and replace it with a modern, freestanding soaking tub.", getRandomTaskState(), "plumbing.png");
        task1.setDueDate(LocalDate.of(2025, 6, 27));
        task1.addExpense(new Expense(task1, "Freestanding Tub", ExpenseCategory.MISCELLANEOUS, new BigDecimal("1200.00"), LocalDate.now()));
        task1.addExpense(new Expense(task1, "Plumbing Labor", ExpenseCategory.MISCELLANEOUS, new BigDecimal("300.00"), LocalDate.now()));
        task1.addExpense(new Expense(task1, "Bathroom Mirror", ExpenseCategory.MISCELLANEOUS, new BigDecimal("250.00"), LocalDate.now()));
        renovation.addTask(task1);

        Task task2 = new Task(renovation, "Install walk-in shower with rain showerhead",
                "Install a custom walk-in shower with a rain showerhead for a luxurious showering experience.", getRandomTaskState(), "plumbing.png");
        task2.setDueDate(LocalDate.of(2025, 6, 27));
        task2.addExpense(new Expense(task2, "Shower Fixtures", ExpenseCategory.MISCELLANEOUS, new BigDecimal("850.00"), LocalDate.now()));
        task2.addExpense(new Expense(task2, "Shower Glass", ExpenseCategory.MISCELLANEOUS, new BigDecimal("600.00"), LocalDate.now()));
        renovation.addTask(task2);

        Task task3 = new Task(renovation, "Replace old toilet with high-efficiency model",
                "Replace the old toilet with a modern, water-saving model to reduce water usage.", getRandomTaskState(), "plumbing.png");
        task3.setDueDate(LocalDate.of(2025, 7, 22));
        task3.addExpense(new Expense(task3, "High-Efficiency Toilet", ExpenseCategory.MISCELLANEOUS, new BigDecimal("450.00"), LocalDate.now()));
        renovation.addTask(task3);

        Task task4 = new Task(renovation, "Install heated floors",
                "Install underfloor heating to keep the bathroom warm during the colder months.", getRandomTaskState(), "hvac.png");
        task4.setDueDate(LocalDate.of(2025, 7, 22));
        task4.addExpense(new Expense(task4, "Heated Floor Kit", ExpenseCategory.MISCELLANEOUS, new BigDecimal("950.00"), LocalDate.now()));
        task4.addExpense(new Expense(task4, "Thermostat", ExpenseCategory.MISCELLANEOUS, new BigDecimal("150.00"), LocalDate.now()));
        renovation.addTask(task4);

        Task task5 = new Task(renovation, "Upgrade lighting with LED recessed lights",
                "Replace old lighting fixtures with energy-efficient LED recessed lights to brighten the space.", getRandomTaskState(), "electrical.png");
        task5.setDueDate(LocalDate.of(2025, 8, 19));
        task5.addExpense(new Expense(task5, "LED Recessed Lights", ExpenseCategory.MISCELLANEOUS, new BigDecimal("320.00"), LocalDate.now()));
        renovation.addTask(task5);

        Task task6 = new Task(renovation, "Add a large vanity with dual sinks",
                "Install a large vanity with dual sinks to provide ample storage and counter space.", getRandomTaskState(), "house.png");
        task6.setDueDate(LocalDate.of(2025, 8, 17));
        task6.addExpense(new Expense(task6, "Double Sink Vanity", ExpenseCategory.MISCELLANEOUS, new BigDecimal("1100.00"), LocalDate.now()));
        renovation.addTask(task6);

        Task task7 = new Task(renovation, "Install a large mirror above the vanity",
                "Install a large, modern mirror above the vanity to enhance the bathroom's appearance.", getRandomTaskState(), "house.png");
        task7.setDueDate(LocalDate.of(2025, 9, 12));
        renovation.addTask(task7);

        Task task8 = new Task(renovation, "Replace flooring with marble tiles",
                "Install elegant marble tiles on the floor to give the bathroom a luxurious look.", getRandomTaskState(), "flooring.png");
        task8.setDueDate(LocalDate.of(2025, 6, 12));
        task8.addExpense(new Expense(task8, "Marble Tiles", ExpenseCategory.MISCELLANEOUS, new BigDecimal("1450.00"), LocalDate.now()));
        task8.addExpense(new Expense(task8, "Tile Adhesive", ExpenseCategory.MISCELLANEOUS, new BigDecimal("120.00"), LocalDate.now()));
        renovation.addTask(task8);

        Task task9 = new Task(renovation, "Add custom cabinetry for extra storage",
                "Install custom cabinetry for additional storage space, including shelves and drawers.", getRandomTaskState(), "carpentry.png");
        task9.setDueDate(LocalDate.of(2025, 6, 12));
        task9.addExpense(new Expense(task9, "Custom Cabinets", ExpenseCategory.MISCELLANEOUS, new BigDecimal("1000.00"), LocalDate.now()));
        renovation.addTask(task9);

        Task task10 = new Task(renovation, "Install new towel racks and hooks",
                "Replace old towel racks and hooks with modern fixtures for better functionality and design.", getRandomTaskState(), "house.png");
        task10.setDueDate(LocalDate.of(2025, 6, 12));
        task10.addExpense(new Expense(task10, "Towel Rack Set", ExpenseCategory.MISCELLANEOUS, new BigDecimal("80.00"), LocalDate.now()));
        renovation.addTask(task10);

        Task task11 = new Task(renovation, "Install new shower doors",
                "Replace old shower doors with clear, tempered glass doors for a sleek, modern look.", getRandomTaskState(), "door.png");
        task11.setDueDate(LocalDate.of(2025, 10, 3));
        task11.addExpense(new Expense(task11, "Shower Doors", ExpenseCategory.MISCELLANEOUS, new BigDecimal("500.00"), LocalDate.now()));
        renovation.addTask(task11);

        Task task12 = new Task(renovation, "Replace bathroom fan with quieter, more efficient model",
                "Install a quieter, more energy-efficient exhaust fan to improve ventilation.", getRandomTaskState(), "electrical.png");
        task12.setDueDate(LocalDate.of(2025, 11, 1));
        task12.addExpense(new Expense(task12, "Quiet Exhaust Fan", ExpenseCategory.MISCELLANEOUS, new BigDecimal("220.00"), LocalDate.now()));
        renovation.addTask(task12);

        Task task13 = new Task(renovation, "Install new baseboards",
                "Install new baseboards around the perimeter of the bathroom to complete the updated look.", getRandomTaskState(), "carpentry.png");
        task13.setDueDate(LocalDate.of(2025, 6, 3));
        task13.addExpense(new Expense(task13, "Baseboard Trim", ExpenseCategory.MISCELLANEOUS, new BigDecimal("180.00"), LocalDate.now()));
        renovation.addTask(task13);

        Task task14 = new Task(renovation, "Install luxury towel warmer",
                "Install an electric towel warmer for added comfort and luxury after showering.", getRandomTaskState(), "electrical.png");
        task14.setDueDate(LocalDate.of(2025, 6, 3));
        task14.addExpense(new Expense(task14, "Luxury Towel Warmer", ExpenseCategory.MISCELLANEOUS, new BigDecimal("300.00"), LocalDate.now()));
        renovation.addTask(task14);

        Task task15 = new Task(renovation, "Upgrade to a smart toilet",
                "Install a smart toilet with modern features such as bidet functions and heated seating.", getRandomTaskState(), "plumbing.png");
        task15.setDueDate(LocalDate.of(2025, 6, 26));
        task15.addExpense(new Expense(task15, "Smart Toilet", ExpenseCategory.MISCELLANEOUS, new BigDecimal("1400.00"), LocalDate.now()));
        renovation.addTask(task15);

        Task task16 = new Task(renovation, "Replace all faucets with high-end models",
                "Replace all faucets with luxury, water-efficient models to complete the modern design.", getRandomTaskState(), "plumbing.png");
        task16.setDueDate(LocalDate.of(2025, 7, 8));
        task16.addExpense(new Expense(task16, "High-End Faucets", ExpenseCategory.MISCELLANEOUS, new BigDecimal("700.00"), LocalDate.now()));
        renovation.addTask(task16);

        Task task17 = new Task(renovation, "Add decorative tiling on shower walls",
                "Install decorative tiling, such as subway tiles or mosaic accents, on the shower walls.", getRandomTaskState(), "demolition.png");
        task17.setDueDate(LocalDate.of(2025, 7, 9));
        task17.addExpense(new Expense(task17, "Subway Tile", ExpenseCategory.MISCELLANEOUS, new BigDecimal("500.00"), LocalDate.now()));
        task17.addExpense(new Expense(task17, "Tile Installation", ExpenseCategory.MISCELLANEOUS, new BigDecimal("200.00"), LocalDate.now()));
        renovation.addTask(task17);

        Task task18 = new Task(renovation, "Install a heated towel rack",
                "Install a wall-mounted heated towel rack for added luxury and convenience.", getRandomTaskState(), "electrical.png");
        task18.setDueDate(LocalDate.of(2025, 10, 12));
        task18.addExpense(new Expense(task18, "Heated Towel Rack", ExpenseCategory.MISCELLANEOUS, new BigDecimal("270.00"), LocalDate.now()));
        renovation.addTask(task18);

        Task task19 = new Task(renovation, "Install new window with frosted glass for privacy",
                "Replace the old window with a new frosted glass window for privacy while allowing natural light.", getRandomTaskState(), "window.png");
        task19.setDueDate(LocalDate.of(2025, 5, 20));
        task19.addExpense(new Expense(task19, "Frosted Glass Window", ExpenseCategory.MISCELLANEOUS, new BigDecimal("350.00"), LocalDate.now()));
        renovation.addTask(task19);

        Task task20 = new Task(renovation, "Paint walls with waterproof bathroom paint",
                "Paint the bathroom walls with a special waterproof paint to prevent mold and mildew.", getRandomTaskState(), "house.png");
        task20.setDueDate(LocalDate.of(2025, 5, 20));
        task20.addExpense(new Expense(task20, "Waterproof Paint", ExpenseCategory.MISCELLANEOUS, new BigDecimal("160.00"), LocalDate.now()));
        renovation.addTask(task20);

        Task task21 = new Task(renovation, "Install a bidet",
                "Install a new bidet to improve hygiene.", getRandomTaskState(), "plumbing.png");
        task21.setDueDate(LocalDate.of(2025, 5, 20));
        task21.addExpense(new Expense(task21, "Standard Bidet", ExpenseCategory.MISCELLANEOUS, new BigDecimal("400.00"), LocalDate.now()));
        renovation.addTask(task21);

        Task task22 = new Task(renovation, "Replace shower drain",
                "Replace the old, possibly clogged, shower drain with a new one.", getRandomTaskState(), "plumbing.png");
        task22.setDueDate(LocalDate.of(2025, 5, 20));
        task22.addExpense(new Expense(task22, "Shower Drain Kit", ExpenseCategory.MISCELLANEOUS, new BigDecimal("120.00"), LocalDate.now()));
        renovation.addTask(task22);

        Task task23 = new Task(renovation, "Install grab bars",
                "Install grab bars in the shower and near the toilet for safety and accessibility.", getRandomTaskState(), "house.png");
        task23.setDueDate(LocalDate.of(2025, 5, 21));
        task23.addExpense(new Expense(task23, "Grab Bars", ExpenseCategory.MISCELLANEOUS, new BigDecimal("90.00"), LocalDate.now()));
        renovation.addTask(task23);

        Task task24 = new Task(renovation, "Seal grout",
                "Seal all tile grout to prevent water damage and mold growth.", getRandomTaskState(), "house.png");
        task24.setDueDate(LocalDate.of(2025, 5, 14));
        task24.addExpense(new Expense(task24, "Grout Sealer", ExpenseCategory.MISCELLANEOUS, new BigDecimal("45.00"), LocalDate.now()));
        renovation.addTask(task24);

        Task task25 = new Task(renovation, "Install a medicine cabinet",
                "Install a new medicine cabinet for additional storage.", getRandomTaskState(), "house.png");
        task25.setDueDate(LocalDate.of(2025, 5, 19));
        task25.addExpense(new Expense(task25, "Medicine Cabinet", ExpenseCategory.MISCELLANEOUS, new BigDecimal("180.00"), LocalDate.now()));
        renovation.addTask(task25);

        Task task26 = new Task(renovation, "Replace light switches and outlets",
                "Replace old light switches and outlets with new, updated ones.", getRandomTaskState(), "electrical.png");
        task26.setDueDate(LocalDate.of(2025, 6, 20));
        renovation.addTask(task26);

        Task task27 = new Task(renovation, "Install a skylight",
                "Install a skylight to bring more natural light into the bathroom.", getRandomTaskState(), "window.png");
        task27.setDueDate(LocalDate.of(2025, 6, 20));
        task27.addExpense(new Expense(task27, "Skylight Kit", ExpenseCategory.MISCELLANEOUS, new BigDecimal("650.00"), LocalDate.now()));
        renovation.addTask(task27);

        Task task28 = new Task(renovation, "Add a linen closet or shelving",
                "Add a linen closet or shelving unit to increase storage space for towels and toiletries.", getRandomTaskState(), "carpentry.png");
        task28.setDueDate(LocalDate.of(2025, 6, 20));
        task28.addExpense(new Expense(task28, "Linen Shelving Unit", ExpenseCategory.MISCELLANEOUS, new BigDecimal("240.00"), LocalDate.now()));
        renovation.addTask(task28);

        Task task29 = new Task(renovation, "Install a ventilation fan timer",
                "Install a timer for the ventilation fan to ensure it runs long enough to remove moisture.", getRandomTaskState(), "electrical.png");
        task29.setDueDate(LocalDate.of(2025, 6, 20));
        task29.addExpense(new Expense(task29, "Fan Timer Switch", ExpenseCategory.MISCELLANEOUS, new BigDecimal("60.00"), LocalDate.now()));
        renovation.addTask(task29);

        Task task30 = new Task(renovation, "Apply a mold-resistant sealant",
                "Apply a mold-resistant sealant around the tub, shower, and sink.", getRandomTaskState(), "house.png");
        task30.setDueDate(LocalDate.of(2025, 6, 20));
        task30.addExpense(new Expense(task30, "Mold-Resistant Sealant", ExpenseCategory.MISCELLANEOUS, new BigDecimal("55.00"), LocalDate.now()));
        renovation.addTask(task30);

        Task task31 = new Task(renovation, "Think of more tasks",
                "Come up with cool funny tasks that demo audiences will love.", getRandomTaskState(), "house.png");
        task31.addExpense(new Expense(task31, "Brainstorming Snacks", ExpenseCategory.MISCELLANEOUS, new BigDecimal("15.00"), LocalDate.now()));
        renovation.addTask(task31);

        // Add tasks to the renovation and rooms
        task1.getRooms().add(bathroom);
        task2.getRooms().add(bathroom);
        task3.getRooms().add(bathroom);
        task4.getRooms().add(bathroom);
        task5.getRooms().add(bathroom);
        task6.getRooms().add(bathroom);
        task7.getRooms().add(bathroom);
        task8.getRooms().add(bathroom);
        task9.getRooms().add(bathroom);
        task10.getRooms().add(bathroom);
        task11.getRooms().add(bathroom);
        task12.getRooms().add(bathroom);
        task13.getRooms().add(bathroom);
        task14.getRooms().add(bathroom);
        task15.getRooms().add(bathroom);
        task16.getRooms().add(bathroom);
        task17.getRooms().add(bathroom);
        task18.getRooms().add(bathroom);
        task19.getRooms().add(bathroom);
        task20.getRooms().add(bathroom);
        task21.getRooms().add(bathroom);
        task22.getRooms().add(bathroom);
        task23.getRooms().add(bathroom);
        task24.getRooms().add(bathroom);
        task25.getRooms().add(bathroom);
        task26.getRooms().add(bathroom);
        task27.getRooms().add(bathroom);
        task28.getRooms().add(bathroom);
        task29.getRooms().add(bathroom);
        task30.getRooms().add(bathroom);
        task31.getRooms().add(bathroom);

        renovation.addTask(task1);
        renovation.addTask(task2);
        renovation.addTask(task3);
        renovation.addTask(task4);
        renovation.addTask(task5);
        renovation.addTask(task6);
        renovation.addTask(task7);
        renovation.addTask(task8);
        renovation.addTask(task9);
        renovation.addTask(task10);
        renovation.addTask(task11);
        renovation.addTask(task12);
        renovation.addTask(task13);
        renovation.addTask(task14);
        renovation.addTask(task15);
        renovation.addTask(task16);
        renovation.addTask(task17);
        renovation.addTask(task18);
        renovation.addTask(task19);
        renovation.addTask(task20);
        renovation.addTask(task21);
        renovation.addTask(task22);
        renovation.addTask(task23);
        renovation.addTask(task24);
        renovation.addTask(task25);
        renovation.addTask(task26);
        renovation.addTask(task27);
        renovation.addTask(task28);
        renovation.addTask(task29);
        renovation.addTask(task30);
        renovation.addTask(task31);

        renovationRepository.save(renovation);
    }

}
